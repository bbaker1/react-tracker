{"ast":null,"code":"var _jsxFileName = \"/Users/benbaker/react-tracker/project/src/components/Tasks/TaskGraph.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { VictoryPie } from \"victory\";\nimport { fetchTasks } from \"../../actions\";\n\nclass TaskGraph extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderGraph = () => {\n      const userTasks = this.props.tasks.filter(task => task.userId !== this.props.currentUserId);\n      const categories = userTasks.map(task => task['category']);\n      const numTasks = userTasks.length;\n      console.log(userTasks.filter(task => task['category'] === \"Running\").length / numTasks * 100);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(VictoryPie, {\n        data: [{\n          x: categories[0],\n          y: userTasks.filter(task => task['category'] === \"Running\").length / numTasks * 100\n        }, {\n          x: categories[1],\n          y: userTasks.filter(task => task['category'] === \"Coding\").length / numTasks * 100\n        }, {\n          x: categories[2],\n          y: userTasks.filter(task => task['category'] === \"Relaxing\").length / numTasks * 100\n        }],\n        animate: {\n          duration: 2000\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }));\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchTasks();\n  }\n\n  createCategoriesArray() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.renderGraph());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: Object.values(state.tasks),\n    currentUserId: state.auth.UserId\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTasks\n})(TaskGraph);","map":{"version":3,"sources":["/Users/benbaker/react-tracker/project/src/components/Tasks/TaskGraph.js"],"names":["React","connect","VictoryPie","fetchTasks","TaskGraph","Component","renderGraph","userTasks","props","tasks","filter","task","userId","currentUserId","categories","map","numTasks","length","console","log","x","y","duration","componentDidMount","createCategoriesArray","render","mapStateToProps","state","Object","values","auth","UserId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAStCC,WATsC,GASxB,MAAM;AAClB,YAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAChBC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,aADnB,CAAlB;AAIA,YAAMC,UAAU,GAAGP,SAAS,CAACQ,GAAV,CAAeJ,IAAD,IAAUA,IAAI,CAAC,UAAD,CAA5B,CAAnB;AACA,YAAMK,QAAQ,GAAGT,SAAS,CAACU,MAA3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAcZ,SAAS,CAACG,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAAC,UAAD,CAAJ,KAAqB,SAAhD,EAA2DM,MAA5D,GAAsED,QAAvE,GAAmF,GAA/F;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,CACJ;AAAEI,UAAAA,CAAC,EAAEN,UAAU,CAAC,CAAD,CAAf;AAAoBO,UAAAA,CAAC,EAAId,SAAS,CAACG,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAAC,UAAD,CAAJ,KAAqB,SAAhD,EAA2DM,MAA5D,GAAsED,QAAvE,GAAmF;AAA1G,SADI,EAEJ;AAAEI,UAAAA,CAAC,EAAEN,UAAU,CAAC,CAAD,CAAf;AAAoBO,UAAAA,CAAC,EAAId,SAAS,CAACG,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAAC,UAAD,CAAJ,KAAqB,QAAhD,EAA0DM,MAA3D,GAAqED,QAAtE,GAAkF;AAAzG,SAFI,EAGJ;AAAEI,UAAAA,CAAC,EAAEN,UAAU,CAAC,CAAD,CAAf;AAAoBO,UAAAA,CAAC,EAAId,SAAS,CAACG,MAAV,CAAkBC,IAAD,IAAUA,IAAI,CAAC,UAAD,CAAJ,KAAqB,UAAhD,EAA4DM,MAA7D,GAAuED,QAAxE,GAAoF;AAA3G,SAHI,CADR;AAME,QAAA,OAAO,EAAE;AAAEM,UAAAA,QAAQ,EAAE;AAAZ,SANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAYD,KA9BqC;AAAA;;AACtCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKf,KAAL,CAAWL,UAAX;AACD;;AAEDqB,EAAAA,qBAAqB,GAAG,CAEvB;;AAyBDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKnB,WAAL,EAAN,CAAP;AACD;;AAlCqC;;AAqCxC,MAAMoB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLlB,IAAAA,KAAK,EAAEmB,MAAM,CAACC,MAAP,CAAcF,KAAK,CAAClB,KAApB,CADF;AAELI,IAAAA,aAAa,EAAEc,KAAK,CAACG,IAAN,CAAWC;AAFrB,GAAP;AAID,CALD;;AAOA,eAAe9B,OAAO,CACpByB,eADoB,EAEpB;AAAEvB,EAAAA;AAAF,CAFoB,CAAP,CAGbC,SAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { VictoryPie } from \"victory\";\nimport { fetchTasks } from \"../../actions\";\n\nclass TaskGraph extends React.Component {\n  componentDidMount() {\n    this.props.fetchTasks();\n  }\n\n  createCategoriesArray() {\n\n  }\n\n  renderGraph = () => {\n    const userTasks = this.props.tasks.filter(\n      task => task.userId !== this.props.currentUserId\n    );\n\n    const categories = userTasks.map((task) => task['category']);\n    const numTasks = userTasks.length;\n    console.log(((userTasks.filter((task) => task['category'] === \"Running\").length) / numTasks) * 100);\n\n    return (\n      <div>\n        <VictoryPie\n          data={[\n            { x: categories[0], y: ((userTasks.filter((task) => task['category'] === \"Running\").length) / numTasks) * 100 },\n            { x: categories[1], y: ((userTasks.filter((task) => task['category'] === \"Coding\").length) / numTasks) * 100 },\n            { x: categories[2], y: ((userTasks.filter((task) => task['category'] === \"Relaxing\").length) / numTasks) * 100 }          \n          ]}\n          animate={{ duration: 2000 }}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    return <div>{this.renderGraph()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: Object.values(state.tasks),\n    currentUserId: state.auth.UserId\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchTasks }\n)(TaskGraph);\n"]},"metadata":{},"sourceType":"module"}