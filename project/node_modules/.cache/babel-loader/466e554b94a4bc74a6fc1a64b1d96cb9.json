{"ast":null,"code":"var _jsxFileName = \"/Users/benbaker/react-tracker/project/src/components/Tasks/TaskForm.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass TaskForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderTextInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.renderNumberInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = \"field \".concat(meta.error && meta.touched ? 'error' : '');\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, label), React.createElement(\"input\", Object.assign({}, input, {\n        type: \"number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"description\",\n      component: this.renderTextInput,\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Field, {\n      name: \"duration\",\n      component: this.renderNumberInput,\n      label: \"Duration\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(Field, {\n      className: \"field\",\n      name: \"category\",\n      component: \"select\",\n      label: \"Category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      value: \"\",\n      disabled: true,\n      defaultValue: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Task Category\"), React.createElement(\"option\", {\n      value: \"Running\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Running\"), React.createElement(\"option\", {\n      value: \"Lifting\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Lifting\"), React.createElement(\"option\", {\n      value: \"Coding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Coding\"), React.createElement(\"option\", {\n      value: \"Reading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Reading\"), React.createElement(\"option\", {\n      value: \"Relaxing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Relaxing\")), React.createElement(\"button\", {\n      className: \"positive ui button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description.\";\n  }\n\n  if (!formValues.duration) {\n    errors.duration = \"You must include the duration of the task.\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"taskForm\",\n  validate\n})(TaskForm);","map":{"version":3,"sources":["/Users/benbaker/react-tracker/project/src/components/Tasks/TaskForm.js"],"names":["React","Field","reduxForm","TaskForm","Component","renderTextInput","input","label","meta","className","error","touched","renderError","renderNumberInput","onSubmit","formValues","props","render","handleSubmit","validate","errors","description","duration","form"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass TaskForm extends React.Component {\n  renderError({ error, touched }) {\n    if (touched && error) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">\n            {error}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  renderTextInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? 'error': ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} autoComplete=\"off\" />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  renderNumberInput = ({ input, label, meta }) => {\n    const className = `field ${meta.error && meta.touched ? 'error': ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} type=\"number\" />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.onSubmit(formValues);\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui form error\"\n      >\n        <Field\n          name=\"description\"\n          component={this.renderTextInput}\n          label=\"Description\"\n        />\n        <Field\n          name=\"duration\"\n          component={this.renderNumberInput}\n          label=\"Duration\"\n        />\n        <Field className=\"field\" name=\"category\" component=\"select\" label=\"Category\">\n          <option value=\"\" disabled defaultValue>Task Category</option>\n          <option value=\"Running\">Running</option>\n          <option value=\"Lifting\">Lifting</option>\n          <option value=\"Coding\">Coding</option>\n          <option value=\"Reading\">Reading</option>\n          <option value=\"Relaxing\">Relaxing</option>\n        </Field>\n        <button className=\"positive ui button\">Submit</button>\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description.\";\n  }\n\n  if (!formValues.duration) {\n    errors.duration = \"You must include the duration of the task.\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"taskForm\",\n  validate\n})(TaskForm);"]},"metadata":{},"sourceType":"module"}