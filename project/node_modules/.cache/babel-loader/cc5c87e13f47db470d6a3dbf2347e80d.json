{"ast":null,"code":"var _jsxFileName = \"/Users/benbaker/react-tracker/project/src/components/Tasks/TaskGraph.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { VictoryPie } from \"victory\";\nimport { fetchTasks } from \"../../actions\";\n\nclass TaskGraph extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderGraph = () => {\n      this.userTasks = this.props.tasks.filter(task => task.userId === this.props.currentUserId);\n      this.categories = this.userTasks.map(task => task[\"category\"]);\n      this.numTasks = this.userTasks.length;\n      this.running = Math.floor(this.userTasks.filter(task => task[\"category\"] === \"Running\").length / this.numTasks * 100);\n      this.totalHours = 0;\n      this.userTasks.map(task => this.totalHours += task.duration);\n\n      if (!this.props.tasks) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, React.createElement(VictoryPie, {\n          data: [{\n            x: this.categories[0],\n            y: this.running\n          }, {\n            x: this.categories[1],\n            y: this.running\n          }],\n          colorScale: [\"tomato\", \"orange\", \"gold\", \"cyan\", \"navy\"],\n          innerRadius: 40,\n          padAngle: 1,\n          height: 225,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }));\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchTasks();\n  }\n\n  createCategoriesArray() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, this.renderGraph());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: Object.values(state.tasks),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchTasks\n})(TaskGraph);","map":{"version":3,"sources":["/Users/benbaker/react-tracker/project/src/components/Tasks/TaskGraph.js"],"names":["React","connect","VictoryPie","fetchTasks","TaskGraph","Component","renderGraph","userTasks","props","tasks","filter","task","userId","currentUserId","categories","map","numTasks","length","running","Math","floor","totalHours","duration","x","y","componentDidMount","createCategoriesArray","render","mapStateToProps","state","Object","values","auth","isSignedIn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AAAA;AAAA;;AAAA,SAOtCC,WAPsC,GAOxB,MAAM;AAClB,WAAKC,SAAL,GAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CACfC,IAAI,IAAIA,IAAI,CAACC,MAAL,KAAgB,KAAKJ,KAAL,CAAWK,aADpB,CAAjB;AAGA,WAAKC,UAAL,GAAkB,KAAKP,SAAL,CAAeQ,GAAf,CAAmBJ,IAAI,IAAIA,IAAI,CAAC,UAAD,CAA/B,CAAlB;AACA,WAAKK,QAAL,GAAgB,KAAKT,SAAL,CAAeU,MAA/B;AACA,WAAKC,OAAL,GAAeC,IAAI,CAACC,KAAL,CACZ,KAAKb,SAAL,CAAeG,MAAf,CAAsBC,IAAI,IAAIA,IAAI,CAAC,UAAD,CAAJ,KAAqB,SAAnD,EAA8DM,MAA9D,GACC,KAAKD,QADP,GAEE,GAHW,CAAf;AAMA,WAAKK,UAAL,GAAkB,CAAlB;AAEA,WAAKd,SAAL,CAAeQ,GAAf,CAAoBJ,IAAD,IAAU,KAAKU,UAAL,IAAmBV,IAAI,CAACW,QAArD;;AAEA,UAAI,CAAC,KAAKd,KAAL,CAAWC,KAAhB,EAAuB;AACrB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACD,OAFD,MAEO;AACL,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,UAAD;AACE,UAAA,IAAI,EAAE,CACJ;AAAEc,YAAAA,CAAC,EAAE,KAAKT,UAAL,CAAgB,CAAhB,CAAL;AAAyBU,YAAAA,CAAC,EAAE,KAAKN;AAAjC,WADI,EAEJ;AAAEK,YAAAA,CAAC,EAAE,KAAKT,UAAL,CAAgB,CAAhB,CAAL;AAAyBU,YAAAA,CAAC,EAAE,KAAKN;AAAjC,WAFI,CADR;AAKE,UAAA,UAAU,EAAE,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,EAA6B,MAA7B,EAAqC,MAArC,CALd;AAME,UAAA,WAAW,EAAE,EANf;AAOE,UAAA,QAAQ,EAAE,CAPZ;AAQE,UAAA,MAAM,EAAE,GARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAcD;AACF,KAzCqC;AAAA;;AACtCO,EAAAA,iBAAiB,GAAG;AAClB,SAAKjB,KAAL,CAAWL,UAAX;AACD;;AAEDuB,EAAAA,qBAAqB,GAAG,CAAE;;AAsC1BC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKrB,WAAL,EAAN,CAAP;AACD;;AA7CqC;;AAgDxC,MAAMsB,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLpB,IAAAA,KAAK,EAAEqB,MAAM,CAACC,MAAP,CAAcF,KAAK,CAACpB,KAApB,CADF;AAELI,IAAAA,aAAa,EAAEgB,KAAK,CAACG,IAAN,CAAWpB,MAFrB;AAGLqB,IAAAA,UAAU,EAAEJ,KAAK,CAACG,IAAN,CAAWC;AAHlB,GAAP;AAKD,CAND;;AAQA,eAAehC,OAAO,CACpB2B,eADoB,EAEpB;AAAEzB,EAAAA;AAAF,CAFoB,CAAP,CAGbC,SAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { VictoryPie } from \"victory\";\nimport { fetchTasks } from \"../../actions\";\n\nclass TaskGraph extends React.Component {\n  componentDidMount() {\n    this.props.fetchTasks();\n  }\n\n  createCategoriesArray() {}\n\n  renderGraph = () => {\n    this.userTasks = this.props.tasks.filter(\n      task => task.userId === this.props.currentUserId\n    );\n    this.categories = this.userTasks.map(task => task[\"category\"]);\n    this.numTasks = this.userTasks.length;\n    this.running = Math.floor(\n      (this.userTasks.filter(task => task[\"category\"] === \"Running\").length /\n        this.numTasks) *\n        100\n    );\n\n    this.totalHours = 0;\n\n    this.userTasks.map((task) => this.totalHours += task.duration);\n\n    if (!this.props.tasks) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div>\n          <VictoryPie\n            data={[\n              { x: this.categories[0], y: this.running },\n              { x: this.categories[1], y: this.running }\n            ]}\n            colorScale={[\"tomato\", \"orange\", \"gold\", \"cyan\", \"navy\" ]}\n            innerRadius={40}\n            padAngle={1}\n            height={225}\n          />\n        </div>\n      );\n    }\n  };\n\n  render() {\n    return <div>{this.renderGraph()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: Object.values(state.tasks),\n    currentUserId: state.auth.userId,\n    isSignedIn: state.auth.isSignedIn\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { fetchTasks }\n)(TaskGraph);\n"]},"metadata":{},"sourceType":"module"}